import tkinter as tk
from tkinter import ttk
import pandas as pd

class ForceParametersController:
    def __init__(self, root):
        self.root = root
        self.root.title("Force Parameters")

        self.MQ4CMaxRange = tk.Label(self.root, text="")
        self.MQ4CCruiseSpeed = tk.Label(self.root, text="")
        self.MQ4CAverageNetSpeed = tk.Label(self.root, text="")
        self.MQ4CTotalEndurance = tk.Label(self.root, text="")
        self.MQ4CRangeToHorizon = tk.Label(self.root, text="")
        self.MQ4CAreaSweepPerHour = tk.Label(self.root, text="")
        self.MQ9BMaxRange = tk.Label(self.root, text="")
        self.MQ9BCruiseSpeed = tk.Label(self.root, text="")
        self.MQ9BAverageNetSpeed = tk.Label(self.root, text="")
        self.MQ9BTotalEndurance = tk.Label(self.root, text="")
        self.MQ9BRangeToHorizon = tk.Label(self.root, text="")
        self.MQ9BAreaSweepPerHour = tk.Label(self.root, text="")
        self.integratorMaxRange = tk.Label(self.root, text="")
        self.integratorCruiseSpeed = tk.Label(self.root, text="")
        self.integratorAverageNetSpeed = tk.Label(self.root, text="")
        self.integratorTotalEndurance = tk.Label(self.root, text="")
        self.integratorRangeToHorizon = tk.Label(self.root, text="")
        self.integratorAreaSweepPerHour = tk.Label(self.root, text="")
        self.P1MaxRange = tk.Label(self.root, text="")
        self.P1CruiseSpeed = tk.Label(self.root, text="")
        self.P1AverageNetSpeed = tk.Label(self.root, text="")
        self.P1TotalEndurance = tk.Label(self.root, text="")
        self.P1RangeToHorizon = tk.Label(self.root, text="")
        self.P1AreaSweepPerHour = tk.Label(self.root, text="")
        self.RQ58MaxRange = tk.Label(self.root, text="")
        self.RQ58CruiseSpeed = tk.Label(self.root, text="")
        self.RQ58AverageNetSpeed = tk.Label(self.root, text="")
        self.RQ58TotalEndurance = tk.Label(self.root, text="")
        self.RQ58RangeToHorizon = tk.Label(self.root, text="")
        self.RQ58AreaSweepPerHour = tk.Label(self.root, text="")
        self.thunderheadMaxRange = tk.Label(self.root, text="")
        self.thunderheadCruiseSpeed = tk.Label(self.root, text="")
        self.thunderheadAverageNetSpeed = tk.Label(self.root, text="")
        self.thunderheadTotalEndurance = tk.Label(self.root, text="")
        self.thunderheadRangeToHorizon = tk.Label(self.root, text="")
        self.thunderheadAreaSweepPerHour = tk.Label(self.root, text="")
        self.MQ4CCruiseAltitudeM = tk.Label(self.root, text="")
        self.MQ9BCruiseAltitudeM = tk.Label(self.root, text="")
        self.integratorCruiseAltitudeM = tk.Label(self.root, text="")
        self.P1CruiseAltitudeM = tk.Label(self.root, text="")
        self.RQ58CruiseAltitudeM = tk.Label(self.root, text="")
        self.thunderheadCruiseAltitudeM = tk.Label(self.root, text="")

        self.MQ4CAverageOpposingWind = ttk.Combobox(self.root, values=[i for i in range(0, 101, 5)], state="readonly")
        self.MQ9BAverageOpposingWind = ttk.Combobox(self.root, values=[i for i in range(0, 101, 5)], state="readonly")
        self.integratorAverageOpposingWind = ttk.Combobox(self.root, values=[i for i in range(0, 101, 5)], state="readonly")
        self.P1AverageOpposingWind = ttk.Combobox(self.root, values=[i for i in range(0, 101, 5)], state="readonly")
        self.RQ58AverageOpposingWind = ttk.Combobox(self.root, values=[i for i in range(0, 101, 5)], state="readonly")
        self.MQ4CCruiseAltitudeFt = ttk.Combobox(self.root, values=[i for i in range(0, 75001, 5000)], state="readonly")
        self.MQ9BCruiseAltitudeFt = ttk.Combobox(self.root, values=[i for i in range(0, 75001, 5000)], state="readonly")
        self.integratorCruiseAltitudeFt = ttk.Combobox(self.root, values=[i for i in range(0, 75001, 5000)], state="readonly")
        self.P1CruiseAltitudeFt = ttk.Combobox(self.root, values=[i for i in range(0, 75001, 5000)], state="readonly")
        self.RQ58CruiseAltitudeFt = ttk.Combobox(self.root, values=[i for i in range(0, 75001, 5000)], state="readonly")
        self.thunderheadCruiseAltitudeFt = ttk.Combobox(self.root, values=[i for i in range(0, 75001, 5000)], state="readonly")
        self.MQ4CAvailabilityRate = ttk.Combobox(self.root, values=[i for i in range(1, 10)], state="readonly")
        self.MQ9BAvailabilityRate = ttk.Combobox(self.root, values=[i for i in range(1, 10)], state="readonly")
        self.integratorAvailabilityRate = ttk.Combobox(self.root, values=[i for i in range(1, 10)], state="readonly")
        self.P1AvailabilityRate = ttk.Combobox(self.root, values=[i for i in range(1, 10)], state="readonly")
        self.RQ58AvailabilityRate = ttk.Combobox(self.root, values=[i for i in range(1, 10)], state="readonly")
        self.thunderheadAvailabilityRate = ttk.Combobox(self.root, values=[i for i in range(1, 10)], state="readonly")
        self.MQ4CRangeToSweepWidthConversion = ttk.Combobox(self.root, values=[i for i in range(1, 10)], state="readonly")
        self.MQ9BRangeToSweepWidthConversion = ttk.Combobox(self.root, values=[i for i in range(1, 10)], state="readonly")
        self.integratorRangeToSweepWidthConversion = ttk.Combobox(self.root, values=[i for i in range(1, 10)], state="readonly")
        self.P1RangeToSweepWidthConversion = ttk.Combobox(self.root, values=[i for i in range(1, 10)], state="readonly")
        self.RQ58RangeToSweepWidthConversion = ttk.Combobox(self.root, values=[i for i in range(1, 10)], state="readonly")
        self.thunderheadRangeToSweepWidthConversion = ttk.Combobox(self.root, values=[i for i in range(1, 10)], state="readonly")
        self.MQ4CRevisitRate = ttk.Combobox(self.root, values=[i for i in range(1, 25)], state="readonly")
        self.MQ9BRevisitRate = ttk.Combobox(self.root, values=[i for i in range(1, 25)], state="readonly")
        self.integratorRevisitRate = ttk.Combobox(self.root, values=[i for i in range(1, 25)], state="readonly")
        self.P1RevisitRate = ttk.Combobox(self.root, values=[i for i in range(1, 25)], state="readonly")
        self.RQ58RevisitRate = ttk.Combobox(self.root, values=[i for i in range(1, 25)], state="readonly")
        self.thunderheadRevisitRate = ttk.Combobox(self.root, values=[i for i in range(1, 25)], state="readonly")
        self.MQ4CAreaOfRegard = ttk.Combobox(self.root, values=[i for i in range(50000, 3000001, 50000)], state="readonly")
        self.MQ9BAreaOfRegard = ttk.Combobox(self.root, values=[i for i in range(50000, 3000001, 50000)], state="readonly")
        self.integratorAreaOfRegard = ttk.Combobox(self.root, values=[i for i in range(50000, 3000001, 50000)], state="readonly")
        self.P1AreaOfRegard = ttk.Combobox(self.root, values=[i for i in range(50000, 3000001, 50000)], state="readonly")
        self.RQ58AreaOfRegard = ttk.Combobox(self.root, values=[i for i in range(50000, 3000001, 50000)], state="readonly")
        self.thunderheadAreaOfRegard = ttk.Combobox(self.root, values=[i for i in range(50000, 3000001, 50000)], state="readonly")

        self.MQ4CAverageOpposingWind.current(0)
        self.MQ9BAverageOpposingWind.current(0)
        self.integratorAverageOpposingWind.current(0)
        self.P1AverageOpposingWind.current(0)
        self.RQ58AverageOpposingWind.current(0)
        self.MQ4CCruiseAltitudeFt.current(10)
        self.MQ9BCruiseAltitudeFt.current(6)
        self.integratorCruiseAltitudeFt.current(3)
        self.P1CruiseAltitudeFt.current(7)
        self.RQ58CruiseAltitudeFt.current(6)
        self.thunderheadCruiseAltitudeFt.current(13)
        self.MQ4CAvailabilityRate.current(6)
        self.MQ9BAvailabilityRate.current(8)
        self.integratorAvailabilityRate.current(8)
        self.P1AvailabilityRate.current(6)
        self.RQ58AvailabilityRate.current(8)
        self.thunderheadAvailabilityRate.current(8)
        self.MQ4CRangeToSweepWidthConversion.current(8)
        self.MQ9BRangeToSweepWidthConversion.current(8)
        self.integratorRangeToSweepWidthConversion.current(6)
        self.P1RangeToSweepWidthConversion.current(8)
        self.RQ58RangeToSweepWidthConversion.current(6)
        self.thunderheadRangeToSweepWidthConversion.current(6)
        self.MQ4CRevisitRate.current(1)
        self.MQ9BRevisitRate.current(1)
        self.integratorRevisitRate.current(1)
        self.P1RevisitRate.current(1)
        self.RQ58RevisitRate.current(1)
        self.thunderheadRevisitRate.current(23)
        self.MQ4CAreaOfRegard.current(10)
        self.MQ9BAreaOfRegard.current(10)
        self.integratorAreaOfRegard.current(10)
        self.P1AreaOfRegard.current(10)
        self.RQ58AreaOfRegard.current(10)
        self.thunderheadAreaOfRegard.current(10)

        self.MQ4CMaxRange.grid(row=0, column=0)
        self.MQ4CCruiseSpeed.grid(row=1, column=0)
        self.MQ4CAverageNetSpeed.grid(row=2, column=0)
        self.MQ4CTotalEndurance.grid(row=3, column=0)
        self.MQ4CRangeToHorizon.grid(row=4, column=0)
        self.MQ4CAreaSweepPerHour.grid(row=5, column=0)
        self.MQ9BMaxRange.grid(row=0, column=1)
        self.MQ9BCruiseSpeed.grid(row=1, column=1)
        self.MQ9BAverageNetSpeed.grid(row=2, column=1)
        self.MQ9BTotalEndurance.grid(row=3, column=1)
        self.MQ9BRangeToHorizon.grid(row=4, column=1)
        self.MQ9BAreaSweepPerHour.grid(row=5, column=1)
        self.integratorMaxRange.grid(row=0, column=2)
        self.integratorCruiseSpeed.grid(row=1, column=2)
        self.integratorAverageNetSpeed.grid(row=2, column=2)
        self.integratorTotalEndurance.grid(row=3, column=2)
        self.integratorRangeToHorizon.grid(row=4, column=2)
        self.integratorAreaSweepPerHour.grid(row=5, column=2)
        self.P1MaxRange.grid(row=0, column=3)
        self.P1CruiseSpeed.grid(row=1, column=3)
        self.P1AverageNetSpeed.grid(row=2, column=3)
        self.P1TotalEndurance.grid(row=3, column=3)
        self.P1RangeToHorizon.grid(row=4, column=3)
        self.P1AreaSweepPerHour.grid(row=5, column=3)
        self.RQ58MaxRange.grid(row=0, column=4)
        self.RQ58CruiseSpeed.grid(row=1, column=4)
        self.RQ58AverageNetSpeed.grid(row=2, column=4)
        self.RQ58TotalEndurance.grid(row=3, column=4)
        self.RQ58RangeToHorizon.grid(row=4, column=4)
        self.RQ58AreaSweepPerHour.grid(row=5, column=4)
        self.thunderheadMaxRange.grid(row=0, column=5)
        self.thunderheadCruiseSpeed.grid(row=1, column=5)
        self.thunderheadAverageNetSpeed.grid(row=2, column=5)
        self.thunderheadTotalEndurance.grid(row=3, column=5)
        self.thunderheadRangeToHorizon.grid(row=4, column=5)
        self.thunderheadAreaSweepPerHour.grid(row=5, column=5)
        self.MQ4CCruiseAltitudeM.grid(row=6, column=0)
        self.MQ9BCruiseAltitudeM.grid(row=6, column=1)
        self.integratorCruiseAltitudeM.grid(row=6, column=2)
        self.P1CruiseAltitudeM.grid(row=6, column=3)
        self.RQ58CruiseAltitudeM.grid(row=6, column=4)
        self.thunderheadCruiseAltitudeM.grid(row=6, column=5)

        self.MQ4CAverageOpposingWind.grid(row=7, column=0)
        self.MQ9BAverageOpposingWind.grid(row=7, column=1)
        self.integratorAverageOpposingWind.grid(row=7, column=2)
        self.P1AverageOpposingWind.grid(row=7, column=3)
        self.RQ58AverageOpposingWind.grid(row=7, column=4)
        self.MQ4CCruiseAltitudeFt.grid(row=8, column=0)
        self.MQ9BCruiseAltitudeFt.grid(row=8, column=1)
        self.integratorCruiseAltitudeFt.grid(row=8, column=2)
        self.P1CruiseAltitudeFt.grid(row=8, column=3)
        self.RQ58CruiseAltitudeFt.grid(row=8, column=4)
        self.thunderheadCruiseAltitudeFt.grid(row=8, column=5)
        self.MQ4CAvailabilityRate.grid(row=9, column=0)
        self.MQ9BAvailabilityRate.grid(row=9, column=1)
        self.integratorAvailabilityRate.grid(row=9, column=2)
        self.P1AvailabilityRate.grid(row=9, column=3)
        self.RQ58AvailabilityRate.grid(row=9, column=4)
        self.thunderheadAvailabilityRate.grid(row=9, column=5)
        self.MQ4CRangeToSweepWidthConversion.grid(row=10, column=0)
        self.MQ9BRangeToSweepWidthConversion.grid(row=10, column=1)
        self.integratorRangeToSweepWidthConversion.grid(row=10, column=2)
        self.P1RangeToSweepWidthConversion.grid(row=10, column=3)
        self.RQ58RangeToSweepWidthConversion.grid(row=10, column=4)
        self.thunderheadRangeToSweepWidthConversion.grid(row=10, column=5)
        self.MQ4CRevisitRate.grid(row=11, column=0)
        self.MQ9BRevisitRate.grid(row=11, column=1)
        self.integratorRevisitRate.grid(row=11, column=2)
        self.P1RevisitRate.grid(row=11, column=3)
        self.RQ58RevisitRate.grid(row=11, column=4)
        self.thunderheadRevisitRate.grid(row=11, column=5)
        self.MQ4CAreaOfRegard.grid(row=12, column=0)
        self.MQ9BAreaOfRegard.grid(row=12, column=1)
        self.integratorAreaOfRegard.grid(row=12, column=2)
        self.P1AreaOfRegard.grid(row=12, column=3)
        self.RQ58AreaOfRegard.grid(row=12, column=4)
        self.thunderheadAreaOfRegard.grid(row=12, column=5)

        self.update()
        self.populate()

    def on_update(self):
        self.update()
        self.populate()

    def update(self):
        self.update_MQ4C()
        self.update_MQ9B()
        self.update_integrator()
        self.update_P1()
        self.update_RQ58()
        self.update_thunderhead()

    def populate(self):
        self.populate_MQ4C()
        self.populate_MQ9B()
        self.populate_integrator()
        self.populate_P1()
        self.populate_RQ58()
        self.populate_thunderhead()
        self.populate_time_on_station_chart()

    def populate_MQ4C(self):
        self.MQ4CMaxRange["text"] = str(PurchasingBackend.cart.MQ4C.max_range)
        self.MQ4CCruiseSpeed["text"] = str(PurchasingBackend.cart.MQ4C.cruise_speed)
        self.MQ4CAverageNetSpeed["text"] = str(PurchasingBackend.cart.MQ4C.average_net_speed)
        self.MQ4CTotalEndurance["text"] = str(int(PurchasingBackend.cart.MQ4C.total_endurance))
        self.MQ4CRangeToHorizon["text"] = str(int(PurchasingBackend.cart.MQ4C.range_to_horizon))
        self.MQ4CAreaSweepPerHour["text"] = str(int(PurchasingBackend.cart.MQ4C.area_sweep_per_hour))
        self.MQ4CCruiseAltitudeM["text"] = str(int(PurchasingBackend.cart.MQ4C.cruise_altitude_m))

    def populate_MQ9B(self):
        self.MQ9BMaxRange["text"] = str(PurchasingBackend.cart.MQ9B.max_range)
        self.MQ9BCruiseSpeed["text"] = str(PurchasingBackend.cart.MQ9B.cruise_speed)
        self.MQ9BAverageNetSpeed["text"] = str(PurchasingBackend.cart.MQ9B.average_net_speed)
        self.MQ9BTotalEndurance["text"] = str(int(PurchasingBackend.cart.MQ9B.total_endurance))
        self.MQ9BRangeToHorizon["text"] = str(int(PurchasingBackend.cart.MQ9B.range_to_horizon))
        self.MQ9BAreaSweepPerHour["text"] = str(int(PurchasingBackend.cart.MQ9B.area_sweep_per_hour))
        self.MQ9BCruiseAltitudeM["text"] = str(int(PurchasingBackend.cart.MQ9B.cruise_altitude_m))

    def populate_integrator(self):
        self.integratorMaxRange["text"] = str(PurchasingBackend.cart.integrator.max_range)
        self.integratorCruiseSpeed["text"] = str(PurchasingBackend.cart.integrator.cruise_speed)
        self.integratorAverageNetSpeed["text"] = str(PurchasingBackend.cart.integrator.average_net_speed)
        self.integratorTotalEndurance["text"] = str(int(PurchasingBackend.cart.integrator.total_endurance))
        self.integratorRangeToHorizon["text"] = str(int(PurchasingBackend.cart.integrator.range_to_horizon))
        self.integratorAreaSweepPerHour["text"] = str(int(PurchasingBackend.cart.integrator.area_sweep_per_hour))
        self.integratorCruiseAltitudeM["text"] = str(int(PurchasingBackend.cart.integrator.cruise_altitude_m))

    def populate_P1(self):
        self.P1MaxRange["text"] = str(PurchasingBackend.cart.P1.max_range)
        self.P1CruiseSpeed["text"] = str(PurchasingBackend.cart.P1.cruise_speed)
        self.P1AverageNetSpeed["text"] = str(PurchasingBackend.cart.P1.average_net_speed)
        self.P1TotalEndurance["text"] = str(int(PurchasingBackend.cart.P1.total_endurance))
        self.P1RangeToHorizon["text"] = str(int(PurchasingBackend.cart.P1.range_to_horizon))
        self.P1AreaSweepPerHour["text"] = str(int(PurchasingBackend.cart.P1.area_sweep_per_hour))
        self.P1CruiseAltitudeM["text"] = str(int(PurchasingBackend.cart.P1.cruise_altitude_m))

    def populate_RQ58(self):
        self.RQ58MaxRange["text"] = str(PurchasingBackend.cart.RQ58.max_range)
        self.RQ58CruiseSpeed["text"] = str(PurchasingBackend.cart.RQ58.cruise_speed)
        self.RQ58AverageNetSpeed["text"] = str(PurchasingBackend.cart.RQ58.average_net_speed)
        self.RQ58TotalEndurance["text"] = str(int(PurchasingBackend.cart.RQ58.total_endurance))
        self.RQ58RangeToHorizon["text"] = str(int(PurchasingBackend.cart.RQ58.range_to_horizon))
        self.RQ58AreaSweepPerHour["text"] = str(int(PurchasingBackend.cart.RQ58.area_sweep_per_hour))
        self.RQ58CruiseAltitudeM["text"] = str(int(PurchasingBackend.cart.RQ58.cruise_altitude_m))

    def populate_thunderhead(self):
        self.thunderheadMaxRange["text"] = str(PurchasingBackend.cart.thunderhead.max_range)
        self.thunderheadCruiseSpeed["text"] = str(PurchasingBackend.cart.thunderhead.cruise_speed)
        self.thunderheadAverageNetSpeed["text"] = str(PurchasingBackend.cart.thunderhead.average_net_speed)
        self.thunderheadTotalEndurance["text"] = str(int(PurchasingBackend.cart.thunderhead.total_endurance))
        self.thunderheadRangeToHorizon["text"] = str(int(PurchasingBackend.cart.thunderhead.range_to_horizon))
        self.thunderheadAreaSweepPerHour["text"] = str(int(PurchasingBackend.cart.thunderhead.area_sweep_per_hour))
        self.thunderheadCruiseAltitudeM["text"] = str(int(PurchasingBackend.cart.thunderhead.cruise_altitude_m))

    def populate_time_on_station_chart(self):
        radii = [100, 500, 1000, 1500]
        data = []

        for r in radii:
            series = {"name": str(r) + "nm", "data": []}
            for asset in PurchasingBackend.cart.asset_list:
                if asset.average_time_on_station(r) >= 0:
                    if asset.name == "Thunderhead":
                        series["data"].append([asset.name, asset.average_time_on_station(r) / 72])
                    else:
                        series["data"].append([asset.name, asset.average_time_on_station(r)])
            data.append(series)

        self.time_on_station_chart = pd.DataFrame(data)
        self.time_on_station_chart.plot(kind="bar", x="name", y="data", legend=False, rot=0)
        self.time_on_station_chart.get_figure().show()

    def update_MQ4C(self):
        PurchasingBackend.cart.MQ4C.average_opposing_wind = self.MQ4CAverageOpposingWind.get()
        PurchasingBackend.cart.MQ4C.cruise_altitude_ft = self.MQ4CCruiseAltitudeFt.get()
        PurchasingBackend.cart.MQ4C.availability_rate = self.MQ4CAvailabilityRate.get()
        PurchasingBackend.cart.MQ4C.range_to_sweep_width_conversion = self.MQ4CRangeToSweepWidthConversion.get()
        PurchasingBackend.cart.MQ4C.revisit_rate = self.MQ4CRevisitRate.get()
        PurchasingBackend.cart.MQ4C.area_of_regard = self.MQ4CAreaOfRegard.get()

    def update_MQ9B(self):
        PurchasingBackend.cart.MQ9B.average_opposing_wind = self.MQ9BAverageOpposingWind.get()
        PurchasingBackend.cart.MQ9B.cruise_altitude_ft = self.MQ9BCruiseAltitudeFt.get()
        PurchasingBackend.cart.MQ9B.availability_rate = self.MQ9BAvailabilityRate.get()
        PurchasingBackend.cart.MQ9B.range_to_sweep_width_conversion = self.MQ9BRangeToSweepWidthConversion.get()
        PurchasingBackend.cart.MQ9B.revisit_rate = self.MQ9BRevisitRate.get()
        PurchasingBackend.cart.MQ9B.area_of_regard = self.MQ9BAreaOfRegard.get()

    def update_integrator(self):
        PurchasingBackend.cart.integrator.average_opposing_wind = self.integratorAverageOpposingWind.get()
        PurchasingBackend.cart.integrator.cruise_altitude_ft = self.integratorCruiseAltitudeFt.get()
        PurchasingBackend.cart.integrator.availability_rate = self.integratorAvailabilityRate.get()
        PurchasingBackend.cart.integrator.range_to_sweep_width_conversion = self.integratorRangeToSweepWidthConversion.get()
        PurchasingBackend.cart.integrator.revisit_rate = self.integratorRevisitRate.get()
        PurchasingBackend.cart.integrator.area_of_regard = self.integratorAreaOfRegard.get()

    def update_P1(self):
        PurchasingBackend.cart.P1.average_opposing_wind = self.P1AverageOpposingWind.get()
        PurchasingBackend.cart.P1.cruise_altitude_ft = self.P1CruiseAltitudeFt.get()
        PurchasingBackend.cart.P1.availability_rate = self.P1AvailabilityRate.get()
        PurchasingBackend.cart.P1.range_to_sweep_width_conversion = self.P1RangeToSweepWidthConversion.get()
        PurchasingBackend.cart.P1.revisit_rate = self.P1RevisitRate.get()
        PurchasingBackend.cart.P1.area_of_regard = self.P1AreaOfRegard.get()

    def update_RQ58(self):
        PurchasingBackend.cart.RQ58.average_opposing_wind = self.RQ58AverageOpposingWind.get()
        PurchasingBackend.cart.RQ58.cruise_altitude_ft = self.RQ58CruiseAltitudeFt.get()
        PurchasingBackend.cart.RQ58.availability_rate = self.RQ58AvailabilityRate.get()
        PurchasingBackend.cart.RQ58.range_to_sweep_width_conversion = self.RQ58RangeToSweepWidthConversion.get()
        PurchasingBackend.cart.RQ58.revisit_rate = self.RQ58RevisitRate.get()
        PurchasingBackend.cart.RQ58.area_of_regard = self.RQ58AreaOfRegard.get()

    def update_thunderhead(self):
        PurchasingBackend.cart.thunderhead.cruise_altitude_ft = self.thunderheadCruiseAltitudeFt.get()
        PurchasingBackend.cart.thunderhead.availability_rate = self.thunderheadAvailabilityRate.get()
        PurchasingBackend.cart.thunderhead.range_to_sweep_width_conversion = self.thunderheadRangeToSweepWidthConversion.get()
        PurchasingBackend.cart.thunderhead.revisit_rate = self.thunderheadRevisitRate.get()
        PurchasingBackend.cart.thunderhead.area_of_regard = self.thunderheadAreaOfRegard.get()

